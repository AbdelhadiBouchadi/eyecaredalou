// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    DOCTOR
    RECEPTIONIST
    VISITOR
    ADMIN
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum BloodGroup {
    A_POSITIVE
    A_NEGATIVE
    B_POSITIVE
    B_NEGATIVE
    O_POSITIVE
    O_NEGATIVE
    AB_POSITIVE
    AB_NEGATIVE
}

enum AppointmentStatus {
    PENDING
    APPROVED
    CANCELED
    COMPLETED
}

model User {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?         @unique
    hashedPassword String?
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    role           UserRole?       @default(VISITOR)
    Authenticator  Authenticator[]
    // Doctor-specific fields
    specialization String?
    appointments   Appointment[]   @relation("DoctorAppointments")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

model Patient {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    fullName     String
    profileImage String?
    age          Int
    gender       Gender
    bloodGroup   BloodGroup
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    // Medical Information
    medicalRecords MedicalRecord[]
    appointments   Appointment[]
    eyeImages      EyeImage[]

    // Health Information
    allergies      String[]
    habits         PatientHabit[]
    medicalHistory MedicalHistory[]

    // Stats
    totalAppointments Int @default(0)
}

model PatientHabit {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    patientId String    @db.ObjectId
    habit     String // e.g., "Smoking", "Alcohol"
    frequency String // e.g., "Daily", "Occasional"
    details   String?
    startDate DateTime?
    endDate   DateTime?

    patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model MedicalHistory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    patientId String   @db.ObjectId
    condition String
    diagnosis DateTime
    treatment String?
    notes     String?

    patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    patientId    String   @db.ObjectId
    date         DateTime @default(now())
    complaint    String
    diagnosis    String
    treatment    String
    prescription String?
    notes        String?

    patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model EyeImage {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    patientId   String   @db.ObjectId
    imageUrl    String
    date        DateTime @default(now())
    description String?
    type        String // e.g., "Left Eye", "Right Eye"

    patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Appointment {
    id          String            @id @default(auto()) @map("_id") @db.ObjectId
    patientId   String            @db.ObjectId
    doctorId    String            @db.ObjectId
    date        DateTime
    startTime   DateTime
    endTime     DateTime
    status      AppointmentStatus @default(PENDING)
    service     String // Purpose of visit
    description String?

    patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
    doctor  User    @relation("DoctorAppointments", fields: [doctorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
